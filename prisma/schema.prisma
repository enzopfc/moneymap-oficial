// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relationships
  accounts     Account[]
  categories   Category[]
  budgets      Budget[]
  goals        Goal[]
  debts        Debt[]
  importJobs   ImportJob[]
  notifications Notification[]
  notificationRules NotificationRule[]

  @@map("users")
}

model Account {
  id        String   @id @default(cuid())
  name      String
  type      AccountType
  balance   Decimal  @default(0) @db.Decimal(15, 2)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model Category {
  id     String       @id @default(cuid())
  name   String
  type   CategoryType
  userId String       @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]
  rules        CategorizationRule[]

  @@unique([userId, name, type])
  @@index([userId])
  @@map("categories")
}

model Transaction {
  id          String   @id @default(cuid())
  accountId   String   @map("account_id")
  categoryId  String?  @map("category_id")
  date        DateTime
  amount      Decimal  @db.Decimal(15, 2)
  description String
  source      TransactionSource @default(MANUAL)
  importId    String?  @map("import_id")
  hash        String?  // For deduplication
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  account  Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id])

  @@unique([hash])
  @@index([accountId])
  @@index([categoryId])
  @@index([date])
  @@index([importId])
  @@map("transactions")
}

model Budget {
  id         String  @id @default(cuid())
  userId     String  @map("user_id")
  categoryId String  @map("category_id")
  month      String  // YYYY-MM format
  limit      Decimal @db.Decimal(15, 2)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId, month])
  @@index([userId, month])
  @@map("budgets")
}

model Goal {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  target    Decimal  @db.Decimal(15, 2)
  current   Decimal  @default(0) @db.Decimal(15, 2)
  deadline  DateTime
  status    GoalStatus @default(ACTIVE)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("goals")
}

model Debt {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  principal Decimal  @db.Decimal(15, 2)
  balance   Decimal  @db.Decimal(15, 2)
  rateAA    Decimal  @map("rate_aa") @db.Decimal(5, 4) // Annual rate
  dueDay    Int      @map("due_day")
  status    DebtStatus @default(ACTIVE)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("debts")
}

model ImportJob {
  id        String      @id @default(cuid())
  userId    String      @map("user_id")
  filename  String
  originalName String   @map("original_name")
  fileType  FileType   @map("file_type")
  status    ImportStatus @default(PENDING)
  mapping   Json?       // Import mapping configuration
  summary   Json?       // Import summary (total, processed, errors)
  errors    Json?       // Import errors
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("import_jobs")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  type      NotificationType
  title     String
  message   String
  data      Json?    // Additional notification data
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationRule {
  id                   String             @id @default(cuid())
  userId               String             @map("user_id")
  type                 NotificationType
  enabled              Boolean            @default(true)
  threshold            Decimal?           @db.Decimal(5, 2) // For budget alerts (percentage)
  daysBeforeDeadline   Int?               @map("days_before_deadline") // For goal/debt reminders
  categoryIds          String[]           @map("category_ids") // For budget alerts
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notification_rules")
}

model CategorizationRule {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  categoryId  String   @map("category_id")
  pattern     String   // Regex or simple text pattern
  patternType RulePatternType @map("pattern_type") @default(CONTAINS)
  enabled     Boolean  @default(true)
  priority    Int      @default(0) // Higher priority rules are applied first
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("categorization_rules")
}

// Enums
enum AccountType {
  CORRENTE
  POUPANCA
  MANUAL
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionSource {
  MANUAL
  IMPORT
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum DebtStatus {
  ACTIVE
  PAID_OFF
  CANCELLED
}

enum ImportStatus {
  PENDING
  MAPPING
  PROCESSING
  COMPLETED
  FAILED
}

enum FileType {
  CSV
  OFX
}

enum NotificationType {
  BUDGET_ALERT
  GOAL_DEADLINE
  DEBT_REMINDER
  IMPORT_COMPLETED
  IMPORT_FAILED
}

enum RulePatternType {
  CONTAINS
  STARTS_WITH
  ENDS_WITH
  REGEX
  EQUALS
}
